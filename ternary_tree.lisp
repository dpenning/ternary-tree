(defun create_empty_ternary_tree () nil)
(defun get_lowest_node (tern_tree)
	(pop tern_tree))
(defun get_lower_value (tern_tree)
	(pop tern_tree) (pop tern_tree))
(defun get_middle_node (tern_tree)
	(pop tern_tree) (pop tern_tree) (pop tern_tree))
(defun get_upper_value (tern_tree)
	(pop tern_tree) (pop tern_tree) (pop tern_tree) (pop tern_tree))
(defun get_upper_node (tern_tree)
	(pop tern_tree) (pop tern_tree) (pop tern_tree) (pop tern_tree) (pop tern_tree))
(defun fixed_insert (value tern_tree)
	(if (null tern_tree)
		(list value )
		(if ( = 1 (list-length tern_tree))
			(let ((a (pop tern_tree))) 
				(if ( > value a)
					(list a value)
					(list value a)))
			(if ( = 2 (list-length tern_tree))
				(let ((a (pop tern_tree)))
					(let ((b (pop tern_tree)))
						(if ( <= value a )
							(list (list value) a nil b nil)
							(if ( <= value b )
								(list nil a (list value) b nil)
								(list nil a nil b (list value))))))
				(let* ( (low_node (pop tern_tree)) 
						(low_val (pop tern_tree)) 
						(mid_node (pop tern_tree)) 
						(upr_val (pop tern_tree)) 
						(upr_node (pop tern_tree)))
					(if ( <= value low_val )
						(list (fixed_insert value low_node) low_val mid_node upr_val upr_node)
						(if ( <= value upr_val )
							(list low_node low_val (fixed_insert value mid_node) upr_val upr_node)
							(list low_node low_val mid_node upr_val (fixed_insert value upr_node)))))))))
(defun insert_all_values_into_tern_tree (values tern_tree)
	(if (null values)
		tern_tree
		(let ((a values))
			(let ((b (pop a)))
				(let ((c (fixed_insert b tern_tree)))
					(insert_all_values_into_tern_tree a c))))))

(PRINT (insert_all_values_into_tern_tree (read) (create_empty_ternary_tree)))